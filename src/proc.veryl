/// simple processor
import util::Optype;
module proc (
    i_clk: input clock,
    i_rst: input reset,
) {

    // ===============================================================================
    // instruction fetch
    var r_pc    : logic <32>; // program counter
    var w_ir    : logic <32>; // instruction
    var w_optype: Optype    ; // instruction type
    var w_imm   : logic <32>; // immediate value

    always_ff (i_clk, i_rst) {
        if_reset {
            r_pc = 32'b0;
        } else {
            r_pc = r_pc + 32'd4;
        }
    }

    inst u_imem: imem (
        i_pc  : r_pc,
        o_inst: w_ir,
    );

    inst u_get_imm32_and_optype: get_imm32_and_optype (
        i_insn  : w_ir    ,
        o_imm   : w_imm   ,
        o_optype: w_optype,
    );


    // ===============================================================================
    // instruction decode

    var w_rs1       : logic<32>;
    var w_rs2       : logic<32>;
    var w_write_data: logic<32>;

    inst u_reg: register (
        i_clk                       ,
        i_rst                       ,
        i_instruction : w_ir        ,
        i_write_enable: 1'b1        , // write enable is 1'b1 for now
        i_write_data  : w_write_data,
        o_rs1         : w_rs1       ,
        o_rs2         : w_rs2       ,
    );

    // ===============================================================================
    // execute
    // just a simple adder for now

    var w_rs2_imm: logic<32>;
    assign w_rs2_imm = if (w_optype == Optype::I) {
        w_imm
    } else {
        w_rs2
    };
    var w_alu_result: logic<32>;
    inst u_alu: alu (
        i_op1: w_rs1       ,
        i_op2: w_rs2_imm   ,
        o_res: w_alu_result,
    );

    // ===============================================================================
    // write back

    assign w_write_data = w_alu_result;

}
