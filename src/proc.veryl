/// simple processor
import util::Optype;
pub module proc (
    clk: input clock,
    rst: input reset,
) {

    // ===============================================================================
    // instruction fetch
    var r_pc : logic<32>; // program counter
    var w_ir : logic<32>; // instruction
    var w_imm: logic<32>; // immediate value

    always_ff (clk, rst) {
        if_reset {
            r_pc = 32'b0;
        } else {
            r_pc = r_pc + 32'd4;
        }
    }

    inst u_imem: imem (
        i_pc  : r_pc,
        o_inst: w_ir,
    );

    var is_jtype: logic;
    var is_btype: logic;
    var is_stype: logic;
    var is_utype: logic;
    var is_itype: logic;
    var is_rtype: logic;
    var is_load : logic;
    inst u_get_imm32_and_optype: get_imm32_and_optype (
        i_insn  : w_ir ,
        o_imm   : w_imm,
        is_jtype       ,
        is_btype       ,
        is_stype       ,
        is_utype       ,
        is_itype       ,
        is_rtype       ,
        is_load        ,
    );


    // ===============================================================================
    // instruction decode

    var w_rs1       : logic<32>;
    var w_rs2       : logic<32>;
    var w_write_data: logic<32>;

    inst u_reg: register (
        clk                         ,
        rst                         ,
        i_instruction : w_ir        ,
        i_write_enable: is_load     ,
        i_write_data  : w_write_data,
        o_rs1         : w_rs1       ,
        o_rs2         : w_rs2       ,
    );

    // ===============================================================================
    // execute
    // just a simple adder for now

    var w_rs2_imm: logic<32>;
    assign w_rs2_imm = if is_itype {
        w_imm
    } else {
        w_rs2
    };

    var w_alu_result: logic<32>;
    inst u_alu: alu (
        i_op1: w_rs1       ,
        i_op2: w_rs2_imm   ,
        o_res: w_alu_result,
    );

    // ===============================================================================
    // memory access

    var w_loaded: logic;
    inst u_dmem: dmem (
        clk              ,
        rst              ,
        adr: w_alu_result,
        wd : w_imm       ,
        we : is_stype    ,
        rd : w_loaded    ,
    );

    // ===============================================================================
    // write back

    assign w_write_data = if is_load {
        w_loaded
    } else {
        w_alu_result
    };

}
